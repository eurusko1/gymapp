// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Gymapp1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Gymapp1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/erikolah/Projects/Gymapp1/Gymapp1/_Imports.razor"
using Gymapp1.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
using Gymapp1.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
using NodaTime;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
using Gymapp1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
using DataConnection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/foglalas")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 199 "/Users/erikolah/Projects/Gymapp1/Gymapp1/Pages/Index.razor"
       string proba = "Mainap";

    public int counter = 0;
    DayEvent dayEvent = new DayEvent()
    {
        FromDate = DateTime.Now,
        ToDate = DateTime.Now,
        Note = "",

    };
    TimeModel selected = new TimeModel()
    {
        SelectedTime = ""
    };
    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime date = DateTime.UtcNow;
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;
    public bool Success { get; set; }



    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalenderHead();
        GenerateCalenderBody();
        LoadCalender(date.ToString("MMMM"));

    }
    public void LoadCalender(string Month)
    {

        var month = Month;
        int monthIndex = DateTime.ParseExact(month, "MMMM", CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
        GenerateCalenderHead();
        GenerateCalenderBody();
        StateHasChanged();

    }
    public void TESZT(ChangeEventArgs e)
    {
        var month = e.Value.ToString().ToLower();
        int tmp = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        date = new DateTime(DateTime.Now.Year, tmp, 1);
        LoadCalender(month);
    }

    private void GenerateCalenderHead()
    {
        var day1 = new List<string>();

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();


    }

    private void GenerateCalenderBody()
    {
        weeks = new List<WeekClass>();
        var dayEvents = dayEventService.GetEvents(startDate, endDate);

        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            var currentObject = dayEvents.Find(x => x.EventDate.ToString("dd-MMM-yyyy") == dt.ToString("dd-MMM-yyyy"));

            dates.Add(new DayEvent()
            {
                id = currentObject == null ? 0 : currentObject.id,
                DateValue = dt.ToString("dd-MMM-yyyy"),
                DayName = dt.ToString("dddd"),
            });

            if (flag == 7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }
            if (countdays == totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }
    }
    private void CloseModal()
    {
        ResetModal();
    }
    private void OpenModal(int wIndex, int dIndex)
    {
        selectedWeekIndex = wIndex;
        selectedDayIndex = dIndex;

        var dayEventObj = dayEventService.GetEvent(Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue));
        dayEvent = dayEventObj;

        displayModal = true;
    }

    private void ResetModal()
    {
        displayModal = false;
        selectedDayIndex = -1;
        selectedWeekIndex = -1;
    }
    List<TimeModel> Ido = new List<TimeModel>();
    List<int> Id = new List<int>();
    List<string> datumok = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from idopontok";
        string sql1 = "SELECT id FROM Foglalt";
        Id = await _data.LoadData<int, dynamic>(sql1, new { }, _config.GetConnectionString("default"));
        Ido = await _data.LoadData<TimeModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

    }
    public string ErrorMessage { get; set; }
    public string Message { get; set; }

    async Task SaveNote()
    {

        if (dayEvent.EventDate >= DateTime.Today)
        {


            //  ErrorMessage = "Foglalt";
            if (await CheckIfDateIsTaken(dayEvent.EventDate, selected.SelectedTime))
            {
                ErrorMessage = "Foglalt";
                //  Message = "Válasz egy aktuális dátumot";
            }
            else
            {
                int result = teszt.teszt(dayEvent.Note, dayEvent.EventDate, selected.SelectedTime, dayEvent.FirstName, dayEvent.LastName, dayEvent.Tel, dayEvent.Email);
                Success = true;
                StateHasChanged();
                SendMail(result);
                StateHasChanged();
                ResetModal();
                ErrorMessage = "";
                Message = "";
                ShowAlert();
            }
        }
        else
        {
            Message = "Válasz egy aktuális dátumot";
        }




    }

    private async Task<Boolean> CheckIfDateIsTaken(DateTime date, string time)
    {
        bool isTaken = false;
        string sql = "SELECT * FROM Foglalt WHERE EventDate='" + date.ToString("yyyy-MM-dd") + "' AND IdoPont='" + time + "'";
        List<int> results = await _data.LoadData<int, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        if (results.Count >= 4)
        {
            isTaken = true;
            return isTaken;

        }
        else
        {
            isTaken = false;
            return isTaken;
        }


    }

    private int CheckBookedDates(string date)
    {
        var Date = DateTime.Parse(date);
        int number = teszt.CheckBookedTimes(Date);

        return number;
    }



    [Parameter]
    public int tmp { get; set; }
    public int tmp1 { get; set; }
    public DateTime month { get; set; }
    public int szamlalo { get; set; } = 470;
    public void newWeek()
    {
        DateTime tmpdate = date;
        if (tmp <= 3)
        {
            tmp = tmp + 1;
        }
        else
        {
            date = date.AddMonths(1);
            LoadCalender(date.ToString("MMMM").ToLower());
            tmp = 0;



        }

    }
    void deleteWeek()
    {
        if (tmp > 0)
        {
            tmp -= 1;
        }
        else
        {
            date = date.AddMonths(-1);
            LoadCalender(date.ToString("MMMM").ToLower());
            //tmp = 0;
        }

    }

    public async Task SendMail(int result)
    {
        string uzenet = "Foglalás visszaigazolás GymApp";
        if (Success == true)
        {

            await MailService.SendEmailAsync(dayEvent.Email, uzenet, "<div class=" + "wrapper" + "><div class=" + "emailheader" + "><h2> Kedves " + dayEvent.FirstName + "&nbsp; " + dayEvent.LastName + "!!!</div><div class=" + "emailbody" + "><p>Köszönjük foglalásod Az időpontod:  <strong>" + dayEvent.EventDate.ToString("dddd/MMMM/yyyy") + ":" + selected.SelectedTime + ".</strong></p><br><br> <p>A foglalási kódod a következő: <strong>" + result + " .</strong></p> <p>Ha foglalásod le szeretnéd mondani <a class=" + "text" + " href=" + "https://localhost:5001/torles" + ">Ide Kattintva</a> elvégezheted. </p><p>Nem kell mást tenned mint beírni a foglalási kódód illetve a Keresztnév illetve Vezetékneved.</p> <br><br>  <h2>Várjuk a találkozást a Gymapp Csapata</h2></div> </div>");



        }

    }
    async Task ShowAlert()
    {
        await JsRunTime.InvokeVoidAsync("submit");
    } 

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRunTime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Gymapp1.Service.IMailService MailService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TESZT teszt { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration _config { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDataAccess _data { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Gymapp1.IService.IDayEventService dayEventService { get; set; }
    }
}
#pragma warning restore 1591
