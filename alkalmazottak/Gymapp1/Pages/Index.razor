@page "/foglalas"
@using Gymapp1.Data
@using NodaTime;
@using Gymapp1.Models
@using DataConnection
@using Microsoft.Extensions.Configuration
@inject Gymapp1.IService.IDayEventService dayEventService
@inject IDataAccess _data
@inject IConfiguration _config
@inject TESZT teszt
@attribute [Authorize]
@inject Gymapp1.Service.IMailService MailService


<style type="text/css">
    #tblParent tbody tr td {
        width: 200px;
        height: 200px;
    }

    #divParent {
        position: relative;
    }

    #divModal {
        z-index: 10;
        position: absolute;
        border: 1px solid #000000;
        border-radius: 3px;
        background-color: #ffffff;
        left: 40%;
        top: 20%;
        width: 400px;
        min-height: 300px;
    }

    .modalHeading {
        text-align: center;
        font-size: 50px;
        text-decoration: underline;
        margin-bottom: 36px;
    }
</style>

<h1>Idopont Foglalas</h1>
<EditForm Model="@dayEvent" OnValidSubmit="@SaveNote">
    <DataAnnotationsValidator />

    @if (displayModal)
    {

<div id="divModal">
    <div class="container">
        <div class="panel panel-default">
            <div class="panel-heading modalHeading">Idopont foglalas</div>
            @*<h2 style="position:center">Szabad időpontok száma: @Ido.Count()/@CheckBookedDates()</h2>*@
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-4">
                        <label>Melyik nap : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" @bind-value="@dayEvent.FromDate" style="width:100%;" />
                    </div>
                </div>
            </div>
            @*<div class="row ">
                    <div class="col-md-4">
                        <label>To Date : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" @bind-value="@dayEvent.ToDate" style="width:100%;" />
                    </div>
                </div>*@
            <div class="row">
                <div class="col-md-4">
                    <label>Vezetéknév : </label>
                </div>
                <div class="col-md-8">
                    <InputText id="name" @bind-Value="dayEvent.FirstName" />
                    <ValidationMessage For="() => dayEvent.FirstName" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>Keresztnév : </label>
                </div>
                <div class="col-md-8">
                    <InputText id="Lastname" @bind-Value="dayEvent.LastName" />
                    <ValidationMessage For="() => dayEvent.LastName" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>Telefonszám : </label>
                </div>
                <div class="col-md-8">
                    <InputText id="Tel" @bind-Value="dayEvent.Tel" />
                    <ValidationMessage For="() => dayEvent.Tel" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>Email : </label>
                </div>
                <div class="col-md-8">
                    <InputText id="Email" @bind-Value="dayEvent.Email" />
                    <ValidationMessage For="() => dayEvent.Email" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>Idopont : </label>
                </div>
                <div class="col-md-8">
                    <select @bind="selected.SelectedTime">
                        @foreach (var t in Ido)
                        {
    <option>@t.IdoPont</option>
}

                    </select>

                    <ValidationMessage For="() => selected.SelectedTime" />
                    @ErrorMessage
                    @Message

                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label>Megjegyzés : </label>
                </div>
                <div class="col-md-8">
                    <input type="text" @bind-value="@dayEvent.Note" placeholder="Nem kötelező..." />
                </div>
            </div>
            <div class="row" style="margin-bottom:10px;">
                <div class="col-md-6">
                </div>
                <div class="col-md-6" style="text-align:right;">
                    <button tyep="submit" class="btn btn-success" style="float:left;margin-right:5px;">Save</button>
                    <button class="btn btn-danger" @onclick="CloseModal" style="float:left;">Close</button>

                </div>
            </div>
            <section>
                <div>

                </div>
            </section>
        </div>
    </div>
</div>}
</EditForm>

<select @onchange="TESZT">
    @foreach (string monthName in monthNames)
    {
<option>@monthName</option>}
</select>

<button @onclick="deleteWeek" class="btn btn-primary">PriWeek</button>

<button @onclick="newWeek" class="btn btn-primary">NewWeek</button>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
<th>
    @days[dayIndex]
</th>
}
        </tr>
    </thead>
    <tbody>
        <tr>
            @for (var dayIndex = 0; dayIndex < weeks[tmp].Dates.Count(); dayIndex++)
            {
                var wIndex = tmp;
                var dIndex = dayIndex;

<td @ondblclick="@(() => OpenModal(wIndex, dIndex))">
    @weeks[tmp].Dates[dayIndex].DateValue

    <br /><br />


    Szabad Időpontok @Ido.Count()/@CheckBookedDates(weeks[tmp].Dates[dayIndex].DateValue)

    <br /><br />
</td>
}

        </tr>
    </tbody>
</table>
@*@foreach(var dates in datumok)
{
    dates.datumok.ToString("HH:mm:ss");
}*@


@code{
    string proba = "Mainap";
    DayEvent dayEvent = new DayEvent()
    {
        FromDate = DateTime.Now,
        ToDate = DateTime.Now,
        Note = "",
        BookingCount = 15



    };
    TimeModel selected = new TimeModel()
    {
        SelectedTime = ""
    };
    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime date = DateTime.UtcNow;
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;
    public bool Success { get; set; }


    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalenderHead();
        GenerateCalenderBody();
        LoadCalender(date.ToString("MMMM"));

    }
    public void LoadCalender(string Month)
    {

        var month = Month;
        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
        GenerateCalenderHead();
        GenerateCalenderBody();
        StateHasChanged();

    }
    public void TESZT(ChangeEventArgs e)
    {
        var month = e.Value.ToString().ToLower();
        int tmp = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        date = new DateTime(DateTime.Now.Year, tmp, 1);
        LoadCalender(month);
    }

    private void GenerateCalenderHead()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }
    private void GenerateCalenderBody()
    {
        weeks = new List<WeekClass>();
        var dayEvents = dayEventService.GetEvents(startDate, endDate);

        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            var currentObject = dayEvents.Find(x => x.EventDate.ToString("dd-MMM-yyyy") == dt.ToString("dd-MMM-yyyy"));

            dates.Add(new DayEvent()
            {
                id = currentObject == null ? 0 : currentObject.id,
                DateValue = dt.ToString("dd-MMM-yyyy"),
                DayName = dt.ToString("dddd"),
                Note = currentObject == null ? "" : currentObject.Note,
                FirstName = currentObject == null ? "" : currentObject.FirstName,
                LastName = currentObject == null ? "" : currentObject.LastName,
                Tel = currentObject == null ? "" : currentObject.Tel,
                Email = currentObject == null ? "" : currentObject.Email,

            });

            if (flag == 7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }
            if (countdays == totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }
    }
    private void CloseModal()
    {
        ResetModal();
    }
    private void OpenModal(int wIndex, int dIndex)
    {
        selectedWeekIndex = wIndex;
        selectedDayIndex = dIndex;

        var dayEventObj = dayEventService.GetEvent(Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue));
        dayEvent = dayEventObj;

        displayModal = true;
    }

    private void ResetModal()
    {
        displayModal = false;
        selectedDayIndex = -1;
        selectedWeekIndex = -1;
    }
    List<TimeModel> Ido = new List<TimeModel>();
    List<int> Id = new List<int>();
List<string> datumok = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from idopontok";
        string sql1 = "SELECT id FROM Foglalt";
//string sql2 = "SELECT TIMESTAMPADD(MINUTE, TIMESTAMPDIFF(MINUTE, Erkezes, Tavozas)/2, Erkezes) From Foglalt";

        Id = await _data.LoadData<int, dynamic>(sql1, new { }, _config.GetConnectionString("default"));
        Ido = await _data.LoadData<TimeModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
//datumok = await _data.LoadData<string, dynamic>(sql2, new { }, _config.GetConnectionString("default"));


    }
    public string ErrorMessage { get; set; }
    public string Message { get; set; }

    async Task SaveNote()
    {

        if (dayEvent.EventDate >= DateTime.Today)
        {


            //  ErrorMessage = "Foglalt";
            if (await CheckIfDateIsTaken(dayEvent.EventDate, selected.SelectedTime))
            {
                ErrorMessage = "Foglalt";
                //  Message = "Válasz egy aktuális dátumot";
            }
            else
            {
                int result = teszt.teszt(dayEvent.Note, dayEvent.EventDate, selected.SelectedTime, dayEvent.FirstName, dayEvent.LastName, dayEvent.Tel, dayEvent.Email);
                Success = true;
                StateHasChanged();
                SendMail(result);
                StateHasChanged();
                ResetModal();
                ErrorMessage = "";
                Message = "";
            }
        }
        else
        {
            Message = "Válasz egy aktuális dátumot";
        }




    }

    private async Task<Boolean> CheckIfDateIsTaken(DateTime date, string time)
    {
        bool isTaken = false;
        string sql = "SELECT * FROM Foglalt WHERE EventDate='" + date.ToString("yyyy-MM-dd") + "' AND IdoPont='" + time + "'";
        List<int> results = await _data.LoadData<int, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        if (results.Count > 0)
        {
            isTaken = true;
            return isTaken;

        }
        else
        {
            isTaken = false;
            return isTaken;
        }


    }

    private int CheckBookedDates(string date)
    {
        var Date = DateTime.Parse(date);
        int number = teszt.CheckBookedTimes(Date);

        return number;
    }



    [Parameter]
    public int tmp { get; set; }
    public int tmp1 { get; set; }
    public DateTime month { get; set; }
    public int szamlalo { get; set; } = 470;
    public void newWeek()
    {
        DateTime tmpdate = date;
        if (tmp <= 3)
        {
            tmp = tmp + 1;
        }
        else
        {
            date = date.AddMonths(1);
            LoadCalender(date.ToString("MMMM").ToLower());
            tmp = 0;



        }

    }
    void deleteWeek()
    {
        if (tmp > 0)
        {
            tmp -= 1;
        }
        else
        {
            date = date.AddMonths(-1);
            LoadCalender(date.ToString("MMMM").ToLower());
            //tmp = 0;
        }

    }@*bool IsTaskRunning = false;
        public async Task Clicked()
        {
            IsTaskRunning = true;
            await OnButtonClick();

            //IsTaskRunning = false; use this to enable the button after the button click function executed
            StateHasChanged();
        }

        Task OnButtonClick()
        {
            //here user can perform buton click function
            return Task.Delay(6000);
        }*@public async Task SendMail(int result)
            {
                if (Success == true)
                {

                    await MailService.SendEmailAsync(dayEvent.Email, "Foglalas", "Kedves " + dayEvent.FirstName + dayEvent.LastName + ", \r\n " + "Köszönjük foglalásod " + "Az időpontod: " + selected.SelectedTime + " \r\n    Várjuk a találkozást a Gymapp Csapata" + "A foglalasi kodod: " + result + "Ha leszeretned mondani foglalasod az alabbi linken teheted meg : https://localhost:5001/foglalt es ird be a foglalasi szamod majd torles.");



                }


            }



}
